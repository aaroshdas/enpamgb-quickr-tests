from sgrna_modeler import datasets as da
from sgrna_modeler import models as sg
from sgrna_modeler import enzymes as en

def getEnPAMGB(sequences):	
	model = sg.SklearnSgrnaModel()
	model_weights = sg.get_enpam_gb()
	model.load_model(model_weights, en.cas12a, 'enPAM_GB')
	results = model.predict_seqs(sequences)
	return results

model = sg.SklearnSgrnaModel()
model_weights = sg.get_enpam_gb()
model.load_model(model_weights, en.cas12a, 'enPAM_GB')
# sequences=["TGGTTTTAAAACAGAATATACAGTCTAAAAAACC","CATGTTTTTTTGGGAACCAATCGATAATCACATT"] # HERE ON RED
# sequences = ["TACCTTTGCTGCCACAATCCCTTGGCCCTTCTCA", "CAATACCTTGGCCCTTCTCAGTTCGCTACGACTC", "GAACCTTTGCTGCCACAATACCTTGGCCCTTCTC", 
# 			 "AGAAGGGCCAAGGTATTGTGGCAGCAAAGTTCCTA", "GAACCTTTGCTGCCACAATACCTTGGCCCTTCTCA"
			 
# 			 ]
#last 2 are from deep cpf1 tests
# sequences = ["GAACCTTTGCTGCCACAATACCTTGGCCCTTCTC", "AGAAGGGCCAAGGTATTGTGGCAGCAAAGTTCCTA", "TACCTTTGCTGCCACAATCCCTTGGCCCTTCTCA",
# 			 "GAGAAGGGCCAAGGTATTGTGGCAGCAAAGTTCCA", "CAATACCTTGGCCCTTCTCAGTTCGCTACGACTC", "GAGAAGGGCCAAGGTATTTTGGCAGCAAAGTTCC",
# 			 "GAAGGGCCAAGGTATTGTGGCAGCAAAGTTCCTAC", "CTGAGAAGGGTTAAGGTATTGTGGCAGCAAAGTTC", "GAAGGGCCAAGGTATTGTTGCAGCAAAGTTCCTA",
# 			 "GCGAACTGAGAAGGGCCAAGGTATTGTGGCAGCA", "GAAGGGCCAAGGTATTGTGGCAGCAAAGTTCCTA", "GCGAACTGAGAAGGGCCAAGGTATAGTGGCAGCA",
# 			 "TCGTAGCGAACTGAGAAGGGCCAAGGTATTGTGG", "TGACTTTGAATGGAGTCGTGAGCGCAAGAACGCT", "GTTATTTGAGCAATGCCACTTAATAAACATGTAA"			 
# 			 ]


sequences = ["GCGAACTGAGAAGGGCCAAGGTATTGTGGCAGCA", "GAACCTTTGCTGCCACAATACCTTGGCCCTTCTCA", "CAATACCTTGGCCCTTCTCAGTTCGCTACGACTC",
			 "GAAGGGCCAAGGTATTGTGGCAGCAAAGTTCCTAC", "GAAGGGCCAAGGTATTGTGGCAGCAAAGTTCCTA", "TCGTAGCGAACTGAGAAGGGCCAAGGTATTGTGG",
			 "AGAAGGGCCAAGGTATTGTGGCAGCAAAGTTCCTA", "GAGAAGGGCCAAGGTATTGTGGCAGCAAAGTTCCA", "CTGAGAAGGGTTAAGGTATTGTGGCAGCAAAGTTC",
			 "GCGAACTGAGAAGGGCCAAGGTATAGTGGCAGCA", "TACCTTTGCTGCCACAATCCCTTGGCCCTTCTCA", "GAAGGGCCAAGGTATTGTTGCAGCAAAGTTCCTA",
			 "GAGAAGGGCCAAGGTATTTTGGCAGCAAAGTTCC", "TGACTTTGAATGGAGTCGTGAGCGCAAGAACGCT", "GTTATTTGAGCAATGCCACTTAATAAACATGTAA"			 
			 ]
reverseDict ={"T":"A", "A":"T","C":"G", "G":"C"}
def ReverseComplement(seq):
    newSequences = []
    for i in seq:
        revSeq = ""
        for letter in i:
            revSeq += reverseDict[letter]
        newSequences.append(revSeq)
    return newSequences
sequences = ReverseComplement(sequences)
print(sequences)
prediction = model.predict_seqs(sequences)
print("ignore annoying deprecatation warnings")
#pip install biopython==1.74 joblib==0.13.2 numpy==1.21.6 pandas==0.24.2 scikit-learn==0.21.2 tensorflow==1.14.0
print("use all requirments but also install run pip install protobuf==3.20.* and numpy should be 1.21.6")
print("RAW PREDICTION RESULTS")
print(prediction)
print("PREDICTION RESULT FOR GOOGLE SHEET")
for i in prediction:
	print(i*100)
